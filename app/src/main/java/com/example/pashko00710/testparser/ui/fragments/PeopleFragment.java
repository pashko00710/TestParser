package com.example.pashko00710.testparser.ui.fragments;import android.os.Bundle;import android.support.design.widget.Snackbar;import android.support.v4.app.Fragment;import android.support.v4.app.LoaderManager;import android.support.v4.content.AsyncTaskLoader;import android.support.v4.content.Loader;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.View;import android.widget.Toast;import com.example.pashko00710.testparser.R;import com.example.pashko00710.testparser.adapter.PeoplesAdapter;import com.example.pashko00710.testparser.database.model.People;import com.example.pashko00710.testparser.interfaces.ClickListener;import com.example.pashko00710.testparser.rest.RestService;import com.example.pashko00710.testparser.rest.model.PeoplesModel;import com.example.pashko00710.testparser.utils.DividerItemDecoration;import com.example.pashko00710.testparser.utils.NetworkStatusChecker;import org.androidannotations.annotations.AfterViews;import org.androidannotations.annotations.Background;import org.androidannotations.annotations.EFragment;import org.androidannotations.annotations.UiThread;import org.androidannotations.annotations.ViewById;import java.util.ArrayList;import java.util.List;import retrofit.RetrofitError;@EFragment(R.layout.fragment_listview)public class PeopleFragment extends Fragment {    @ViewById(R.id.fragment_peoples_recyclerview)    RecyclerView recyclerView;    private People peoples;    private String name;    private PeoplesAdapter peoplesAdapter;    @AfterViews    public void initPeoples() {        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));        recyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), LinearLayoutManager.VERTICAL));        getAllPeoplesRest(recyclerView);    }    @Override    public void onDestroy() {        clear();        super.onDestroy();    }    public void loadRecordings() {        getLoaderManager().restartLoader(0, null, new LoaderManager.LoaderCallbacks<List<People>>() {            @Override            public Loader<List<People>> onCreateLoader(int id, Bundle args) {                final AsyncTaskLoader<List<People>> loader = new AsyncTaskLoader<List<People>>(getActivity()) {                    @Override                    public List<People> loadInBackground() {                        return People.getAllPeoples();                    }                };                loader.forceLoad();                return loader;            }            @Override            public void onLoadFinished(Loader<List<People>> loader, List<People> data) {                PeoplesAdapter adapter = (PeoplesAdapter) recyclerView.getAdapter();                if(adapter == null) {                    peoplesAdapter = new PeoplesAdapter(data, new ClickListener() {                        @Override                        public void onItemClick(int position) {                                toggleSection(position);                        }                    });                    recyclerView.setAdapter(peoplesAdapter);                } else {                    adapter.refresh(data);                }            }            @Override            public void onLoaderReset(Loader<List<People>> loader) {//                â€‹loader = null;            }        });    }    private void clear() {        People.deleteAllPeoples();    }    @Background    public void getAllPeoplesRest(View v) {        if (!NetworkStatusChecker.isNetworkAvailable(getContext())) {            Snackbar.make(v, R.string.internet_is_not_found, Snackbar.LENGTH_LONG).show();            return;        }        RestService restService = new RestService();        ArrayList<PeoplesModel> peoplesModel;        try {            peoplesModel = restService.getPeoples();        } catch (RetrofitError e) {            Snackbar.make(v, R.string.internet_is_not_found, Snackbar.LENGTH_LONG).show();            return;        }        for (PeoplesModel people : peoplesModel) {            peoples = new People();            name = people.getName()+" "+people.getSurName();            peoples.setName(name);            if (!peoples.exists()) {                peoples.insert();            } else {                break;            }        }    }    private void toggleSection(int position){        peoplesAdapter.toggleSelection(position);    }//    @Click(R.id.btn_details)    public void clickDetails() {        ArrayList<Integer> peoplesSend = new ArrayList<>();        peoplesSend = peoplesAdapter.sendItems(peoplesAdapter.getSelectedItems());        getItemPeopleRest(peoplesSend);    }    @Background    public void getItemPeopleRest(ArrayList<Integer> peoplesSend) {        RestService restService = new RestService();        for(Integer peopleId: peoplesSend) {            peopleId = ++peopleId;            PeoplesModel peopleItemModels = restService.getItemPeople(peopleId.toString());            showToast(peopleItemModels);        }    }    @UiThread    public void showToast(PeoplesModel peopleItemModels) {        Toast.makeText(getActivity(), peopleItemModels.getName()        + " " + peopleItemModels.getSurName() + " " + peopleItemModels.getInfo()        + " " + peopleItemModels.getCreatedAt(), Toast.LENGTH_LONG).show();    }}