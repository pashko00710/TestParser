package com.example.pashko00710.testparser.adapter;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import com.example.pashko00710.testparser.R;import com.example.pashko00710.testparser.database.model.People;import com.example.pashko00710.testparser.interfaces.ClickListener;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;public class PeoplesAdapter extends SelectableAdapter<PeoplesAdapter.ViewHolder> {    private List<People> mDataset;    private People people;    private ClickListener clickListener;    private String peopleId;    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {        View view;        private ClickListener clickListener;        public TextView name;        public ViewHolder(View v, ClickListener clickListener) {            super(v);            view = v.findViewById(R.id.selected_overlay);            name = (TextView) v.findViewById(R.id.people_name);            this.clickListener = clickListener;            v.setOnClickListener(this);        }        @Override        public void onClick(View v) {            if (clickListener != null) {                clickListener.onItemClick(getAdapterPosition());            }        }    }    public PeoplesAdapter(List<People> myDataset, ClickListener clickListener) {        mDataset = myDataset;        this.clickListener = clickListener;    }    @Override    public ViewHolder onCreateViewHolder(ViewGroup parent,                                         int viewType) {        View v = LayoutInflater.from(parent.getContext())        .inflate(R.layout.listview_item, parent, false);        ViewHolder vh = new ViewHolder(v, clickListener);        return vh;    }    @Override    public void onBindViewHolder(ViewHolder holder, int position) {        people = mDataset.get(position);        holder.view.setVisibility(isSelected(position) ? View.VISIBLE : View.INVISIBLE);        holder.name.setText(people.getName());    }    @Override    public int getItemCount() {        return mDataset.size();    }    public void refresh(List<People> data) {        mDataset.clear();        mDataset.addAll(data);        notifyDataSetChanged();    }    public ArrayList<Integer> sendItems(List<Integer> positions) {        ArrayList<Integer> listPeopleId = new ArrayList<>();        Collections.sort(positions, new Comparator<Integer>() {            @Override            public int compare(Integer lhs, Integer rhs) {                return rhs - lhs;            }        });        while (!positions.isEmpty()) {            sendItem(positions.get(0), listPeopleId);            positions.remove(0);        }        return listPeopleId;    }    public void sendItem(int position, ArrayList<Integer> listPeopleId) {        if (mDataset.get(position) != null) {            listPeopleId.add(Integer.valueOf(position));        }    }}